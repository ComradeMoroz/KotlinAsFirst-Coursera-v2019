@file:Suppress("UNUSED_PARAMETER")

package lesson2.task2

import lesson1.task1.sqr
import kotlin.math.sqrt

/**
 * Пример
 *
 * Лежит ли точка (x, y) внутри окружности с центром в (x0, y0) и радиусом r?
 */
fun pointInsideCircle(x: Double, y: Double, x0: Double, y0: Double, r: Double) =
    sqr(x - x0) + sqr(y - y0) <= sqr(r)

/**
 * Простая
 *
 * Четырехзначное число назовем счастливым, если сумма первых двух ее цифр равна сумме двух последних.
 * Определить, счастливое ли заданное число, вернуть true, если это так.
 */
fun isNumberHappy(number: Int): Boolean = if ((number%10+number%100/10) == (number/100%10+((number/1000)))) true else false

/**
 * Простая
 *
 * На шахматной доске стоят два ферзя (ферзь бьет по вертикали, горизонтали и диагоналям).
 * Определить, угрожают ли они друг другу. Вернуть true, если угрожают.
 * Считать, что ферзи не могут загораживать друг друга.
 */
//Ферзь ходит как ладья и как слон
//Фигура находится под угрозой ладьи, когда она находится на одной вертикали или гоизонтали с ней. Т.е. х фигруы ==  х ладьи ИЛИ у фигру == у ладьи
//Фигура находится под угрозой слона, когда она находится на одной диагонали с ней. т.е. х + у фигуры и x + y слона равны ИЛИ х - у фигуры  равны х - у слона (диагональ справа налево)
fun queenThreatens(x1: Int, y1: Int, x2: Int, y2: Int): Boolean = if ((x1 == x2 || y1 == y2) && x1 + y1 == x2 + y2 || x1 - y1 == x1 - y1) true else false


/**
 * Простая
 *
 * Дан номер месяца (от 1 до 12 включительно) и год (положительный).
 * Вернуть число дней в этом месяце этого года по григорианскому календарю.
 */
//Високосный год кратен 4, число смесяцев в феврале 29 соответственно.
fun daysInMonth(month: Int, year: Int): Int {
    if ((year == 1900 || year == 1990 || year % 4 != 0) && month == 2) {
        return 28
    } else if (year % 4 == 0 && month == 2) {
        return 29
    }

    when (month) {
        1, 3, 5, 7, 8, 10, 12 -> return 31
        4, 6, 9, 11 -> return 30
    }
    return 100
}

/**
 * Средняя
 *
 * Проверить, лежит ли окружность с центром в (x1, y1) и радиусом r1 целиком внутри
 * окружности с центром в (x2, y2) и радиусом r2.
 * Вернуть true, если утверждение верно
 */
//если расстояние между центрами + радиус одной меньше или равны радиусу второй - да, иначе нет
fun circleInside(
    x1: Double, y1: Double, r1: Double,
    x2: Double, y2: Double, r2: Double
): Boolean = if (sqrt(sqr(x2 - x1) + sqr(y2 - y1)) + r1 <= r2) true else false

/**
 * Средняя
 *
 * Определить, пройдет ли кирпич со сторонами а, b, c сквозь прямоугольное отверстие в стене со сторонами r и s.
 * Стороны отверстия должны быть параллельны граням кирпича.
 * Считать, что совпадения длин сторон достаточно для прохождения кирпича, т.е., например,
 * кирпич 4 х 4 х 4 пройдёт через отверстие 4 х 4.
 * Вернуть true, если кирпич пройдёт
 */
fun brickPasses(a: Int, b: Int, c: Int, r: Int, s: Int): Boolean = if (
    //фронтальная
    ((a <= r || a <= s) && (b <= r || b <= r)) ||
    //боковая
    ((a <= r || a <= s) && (c <= r || c <= r)) ||
    //верхняя
    ((b <= r || b <= s) && (c <= r || c <= r))
        ) true else false
